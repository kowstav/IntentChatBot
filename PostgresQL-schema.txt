-- PostgreSQL Schema for Smart Customer Support Chatbot System

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Table to store chat sessions
CREATE TABLE chat_sessions (
    session_id VARCHAR(255) PRIMARY KEY, -- Can be UUID, generated by backend or frontend
    user_id VARCHAR(255) NULL,           -- Optional, if users are authenticated
    start_time TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    end_time TIMESTAMPTZ NULL,
    status VARCHAR(50) NOT NULL CHECK (status IN ('active', 'resolved_bot', 'resolved_human', 'escalated', 'abandoned')),
    -- Example: 'active', 'resolved_bot', 'escalated', 'resolved_human', 'abandoned'
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Table to store individual chat messages (logs)
CREATE TABLE chat_logs (
    log_id SERIAL PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL REFERENCES chat_sessions(session_id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    sender VARCHAR(50) NOT NULL CHECK (sender IN ('user', 'bot', 'system_error')), -- 'user' or 'bot' or 'system_error'
    message_text TEXT NOT NULL,
    intent_classified VARCHAR(100) NULL, -- If sender is 'user' and message processed by bot's NLP
    confidence_score FLOAT NULL,         -- Confidence from the NLP model (0.0 to 1.0)
    -- Additional metadata can be stored as JSONB if needed
    -- metadata JSONB NULL
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Table to store escalation details
CREATE TABLE escalations (
    escalation_ticket_id VARCHAR(255) PRIMARY KEY, -- Can be UUID
    session_id VARCHAR(255) NOT NULL REFERENCES chat_sessions(session_id) ON DELETE CASCADE,
    escalation_time TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    reason TEXT NULL, -- e.g., 'user_request', 'bot_unable_to_resolve', 'low_confidence_repeatedly'
    status VARCHAR(50) NOT NULL CHECK (status IN ('pending', 'assigned', 'in_progress', 'resolved', 'closed')),
    -- Example: 'pending', 'assigned', 'in_progress', 'resolved', 'closed'
    assigned_agent_id VARCHAR(255) NULL, -- ID of the human agent assigned
    resolution_details TEXT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Table to store user feedback on bot interactions
CREATE TABLE feedback (
    feedback_id SERIAL PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL REFERENCES chat_sessions(session_id) ON DELETE CASCADE,
    log_id INTEGER NULL REFERENCES chat_logs(log_id) ON DELETE SET NULL, -- Optional, if feedback is on a specific message
    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5), -- e.g., 1 to 5 stars
    comment TEXT NULL,
    timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Indexes for performance
CREATE INDEX idx_chat_logs_session_id ON chat_logs(session_id);
CREATE INDEX idx_chat_logs_timestamp ON chat_logs(timestamp);
CREATE INDEX idx_escalations_session_id ON escalations(session_id);
CREATE INDEX idx_escalations_status ON escalations(status);
CREATE INDEX idx_feedback_session_id ON feedback(session_id);
CREATE INDEX idx_chat_sessions_user_id ON chat_sessions(user_id);
CREATE INDEX idx_chat_sessions_status ON chat_sessions(status);


-- Optional: Function to update 'updated_at' timestamp automatically
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to tables that have 'updated_at'
CREATE TRIGGER set_timestamp_chat_sessions
BEFORE UPDATE ON chat_sessions
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_escalations
BEFORE UPDATE ON escalations
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Note: chat_logs and feedback are typically append-only for 'created_at',
-- but if they were to be updated, a similar trigger could be added.

COMMENT ON TABLE chat_sessions IS 'Stores information about each customer chat session.';
COMMENT ON COLUMN chat_sessions.session_id IS 'Unique identifier for the chat session (e.g., UUID).';
COMMENT ON COLUMN chat_sessions.user_id IS 'Identifier for the logged-in user, if available.';
COMMENT ON COLUMN chat_sessions.status IS 'Current status of the chat session (active, resolved_bot, escalated, etc.).';

COMMENT ON TABLE chat_logs IS 'Stores individual messages exchanged during chat sessions.';
COMMENT ON COLUMN chat_logs.sender IS 'Indicates if the message was from the user or the bot.';
COMMENT ON COLUMN chat_logs.intent_classified IS 'The intent recognized by the NLP model for a user message.';

COMMENT ON TABLE escalations IS 'Tracks chat sessions that have been escalated to human agents.';
COMMENT ON COLUMN escalations.escalation_ticket_id IS 'Unique identifier for the escalation event.';
COMMENT ON COLUMN escalations.status IS 'Current status of the escalation ticket (pending, assigned, resolved, etc.).';

COMMENT ON TABLE feedback IS 'Stores customer feedback on the helpfulness of bot interactions.';
COMMENT ON COLUMN feedback.rating IS 'Customer rating, typically on a scale of 1 to 5.';

