version: '3.8' # Specifies the Docker Compose file format version

services:
  # --- PostgreSQL Database Service ---
  postgres:
    image: postgres:15-alpine # Use an official PostgreSQL image
    container_name: chatbot_postgres
    environment:
      # These are the credentials your FastAPI backend will use to connect to PostgreSQL.
      # IMPORTANT: For production, use Docker secrets or a more secure way to handle passwords.
      POSTGRES_USER: &db_user your_postgres_user # Replace with your desired username
      POSTGRES_PASSWORD: &db_password your_postgres_password # Replace with your desired strong password
      POSTGRES_DB: &db_name chatbot_db # Replace with your desired database name
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
      # You can also mount an init SQL script to create tables on startup:
      # - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432" # Expose PostgreSQL port to the host (optional, for direct access/debugging)
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Redis Cache Service ---
  redis:
    image: redis:7-alpine # Use an official Redis image
    container_name: chatbot_redis
    ports:
      - "6379:6379" # Expose Redis port to the host (optional, for direct access/debugging)
    # If your Redis needs a password, configure it here and in the backend:
    # command: redis-server --requirepass your_redis_password # Replace with your Redis password
    volumes:
      - redis_data:/data # Persist Redis data (optional, depending on use case)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- FastAPI Backend Service ---
  backend:
    build:
      context: ./backend # Path to the directory containing the backend Dockerfile and main.py
      dockerfile: Dockerfile # Assumes Dockerfile is named 'Dockerfile'
    container_name: chatbot_backend
    depends_on:
      postgres: # Ensure PostgreSQL is healthy before backend starts
        condition: service_healthy
      redis:    # Ensure Redis is healthy before backend starts
        condition: service_healthy
    ports:
      - "8000:8000" # Map container port 8000 to host port 8000
    environment:
      # --- Configuration for your FastAPI application (main.py) ---
      # These should match the environment variables your main.py expects.
      #
      # Database connection details:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # The hostname 'postgres' refers to the service name defined above.
      #
      # Redis connection details:
      REDIS_HOST: redis # The hostname 'redis' refers to the service name.
      REDIS_PORT: 6379
      # REDIS_PASSWORD: your_redis_password # Uncomment and set if Redis requires a password
      #
      # NLP Model Name (if configurable via environment variable in main.py):
      # NLP_MODEL_NAME: "your-username/your-intent-classification-model"
      #
      # Hugging Face Cache (optional, if you want to control it within the container)
      # TRANSFORMERS_CACHE: "/app/.cache/huggingface"
      #
      # Other backend configurations:
      # SOME_API_KEY: "your_api_key_here"
    volumes:
      # If you want live reloading for backend development (mount your source code):
      # - ./backend:/app # Mounts the backend source code into the container
      # Note: For production, you typically build the code into the image.
      #
      # If you pre-downloaded Hugging Face models and want to mount them:
      # - ./hf_cache:/app/.cache/huggingface/hub # Adjust paths as needed
      # This assumes you have a local './hf_cache' directory with model files.
      pass
    restart: unless-stopped
    # Add healthcheck for backend if desired

  # --- React Frontend Service (Served by Nginx) ---
  frontend:
    build:
      context: ./frontend # Path to the directory containing the frontend Dockerfile and React app
      dockerfile: Dockerfile # Assumes Dockerfile is named 'Dockerfile'
    container_name: chatbot_frontend
    ports:
      - "80:80" # Map Nginx container port 80 to host port 80 (or 3000:80, 8080:80, etc.)
    depends_on:
      - backend # Optional: ensure backend is up, though frontend usually just needs API endpoint
    environment:
      # --- Configuration for your React application (if needed at runtime/build time) ---
      # Example: Setting the API URL for the React app.
      # This is often handled by building the React app with the correct API URL,
      # or by configuring Nginx to proxy requests.
      # If your React app reads REACT_APP_API_URL from environment:
      # REACT_APP_API_URL: http://localhost:8000/api # Adjust if Nginx proxies
      #
      # For serving with Nginx, the API URL is typically configured in how Nginx proxies
      # requests to the backend, or the React app is built with the public URL of the backend.
      # If Nginx is proxying /api to backend:8000, React would call /api.
      pass
    restart: unless-stopped
    # If you have a custom nginx.conf for the frontend to proxy API calls:
    # volumes:
    #   - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf # Mount custom Nginx config

# --- Named Volumes for Data Persistence ---
volumes:
  postgres_data: # Data for PostgreSQL will be stored here
    driver: local
  redis_data:    # Data for Redis will be stored here (optional)
    driver: local

